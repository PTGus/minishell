
Signals
Name		|	Number	|	Description							|	Default Action
SIGHUP		|	1		|	Hangup (e.g., terminal closed)		|	Terminate
SIGINT		|	2		|	Interrupt (Ctrl+C)					|	Terminate
SIGQUIT		|	3		|	Quit (Ctrl+)						|	Core dump & Terminate
SIGILL		|	4		|	Illegal instruction					|	Core dump
SIGABRT		|	6		|	Abort								|	Core dump
SIGFPE		|	8		|	Floating point exception			|	Core dump
SIGKILL		|	9		|	Kill (cannot catch/ignore)			|	Terminate
SIGSEGV		|	11		|	Segmentation fault					|	Core dump
SIGPIPE		|	13		|	Broken pipe (write to closed pipe)	|	Terminate
SIGALRM		|	14		|	Alarm clock							|	Terminate
SIGTERM		|	15		|	Terminate							|	Terminate
SIGCHLD		|	17		|	Child stopped or terminated			|	Ignore (usually)
SIGCONT		|	18		|	Continue if stopped					|	Continue
SIGSTOP		|	19		|	Stop (cannot catch/ignore)			|	Stop
SIGTSTP		|	20		|	Stop (Ctrl+Z)						|	Stop
SIGTTIN		|	21		|	Background read from tty			|	Stop
SIGTTOU		|	22		|	Background write to tty				|	Stop


An environment variable's name must start with either an uppercase or lowercase letter (i.e., A–Z or a–z) or an underscore (_).
If you try to assign a value to a name that starts with any other character—such as a digit or a special character—the bash will reject it as an invalid identifier.
However, this restriction applies only to the name—not the value. However after the first character, you can also include digits (0–9) alongside letters and
underscores but still no other characters other thatn these are allowed.

You can assign almost any string to an environment variable, including empty strings.

You can't assign an nvironment variable's value an actual null byte (\0).

Bash doesn’t modify or reject a value based on its content (aside from the null character issue). That means if the program sees a variable with unusual formatting, it’s because that’s the literal string we assigned.

Summary:
Bash will not reject an environment variable value (regardless of its content) as long as we follow proper syntax for the assignment and do not attempt to include a null character. Any string we provide is acceptable; however, if the value’s format is critical for some applications, we might need to ensure it meets those programs’ expectations.


Pid == 0 Is the CHILD process.
Pid > 0 Is the PARENT process.

Pipe_fd[0] = Read end of the pipe.
Pipe_fd[1] = Write end of the pipe.


EXIT CODES
Number		|	Meaning								|	Description
0			|	Success								|	Command completed without errors
1			|	General error						|	Catch-all for generic errors (e.g., cd to nonexistent dir)
2			|	Misuse of shell builtins			|	Incorrect usage of builtins (e.g., exit abc)
126			|	Command found but not executable	|	File exists but cannot be executed (e.g., permission denied, it's a directory)
127			|	Command not found					|	Command does not exist or not found in PATH
128			|	Invalid exit argument				|	Using exit 256 or similar invalid exit value

Edge cases
Ctrl+\-> defines code to 0
Ctrl+C-> defines code to 130


◦ < should redirect input.
◦ > should redirect output.
◦ << should be given a delimiter, then read the input until a line containing the delimiter is seen. However, it doesn’t have to update the history!
 ◦ If you quote the delimiter (e.g., << 'EOF'), no variable expansion or command substitution is done.
 ◦ If unquoted (e.g., << EOF), variables like $USER or $(date) will be expanded.
◦ >> should redirect output in append mode.



The integer status returned by waitpid() contains multiple pieces of information packed into a 16-bit number.

When a process exits normally, the exit code is stored in the high byte of status.
Example:
	- Exit code 127 → status = 127 << 8 = 32512

status:  00000000 01111111 00000000  (binary for 32512)
              ^^       ^^
             unused   exit code

So:
	- "status >> 8" → shifts the exit code down into the low byte.
	- "& 0xFF" → masks out only the lower 8 bits (ensures we get values from 0–255).

<
<<
>>
> " "
and err msg

cd

multi unset

"""
export c
c$c
"""
tabs/espacos a guardar

heredoc ctrl+c fecha td

export +=

exit aa 123 (n e "too many args")

exit +MAXLONGLONG

pipe sozinho |

unset PATH deixa usar absolute paths (/bin/ls)

$"USER" != $'USER'